//=============================================================================
//
//  弾クラス [Bullet.cpp]
//  Date   : 2021/1/10
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "../../../../Component/Component_Model/Component_StaticMesh.h"
#include "../../../../Manager/Manager_Shader.h"
#include "Bullet.h"

//=============================================================================
// 定数宣言
//=============================================================================
constexpr int LIFE_TIME = 240;//生存時間

//=============================================================================
// 初期化関数
//=============================================================================
void  Bullet::Init()
{
	//親クラス初期化
	Actor3D::Init();

	//座標オフセット調整
	m_Position = Vector3{ -100.0f,-100.0f,-100.0f };

	//スケールオフセット調整
	m_Scale = Vector3{0.25f,0.25f,0.25f};

	//静的メッシュコンポーネント追加
	m_Component_StaticMesh = AddComponent<Component_StaticMesh>(0);

	//静的メッシュコンポーネントnullチェック
	if (m_Component_StaticMesh != nullptr)
	{
		//モデルロード
		m_Component_StaticMesh->LoadStaticMesh("ROM\\3D\\Prop\\SM_Sphere.fbx");

		//スケールオフセット調整
		m_Component_StaticMesh->SetScaleRate(0.05f);

	}

	//有効フラグオフ
	m_Active = false;

}

//=============================================================================
// 更新関数
//=============================================================================
void Bullet::Update()
{
	//有効の場合
	if (m_Active)
	{
		//座標加算
		m_Position += m_Velocity;

		//生存時間加算
		m_LifeTime++;

		if (m_LifeTime >= LIFE_TIME)
		{//生存時間が限界を越えた場合

			//使用可能
			m_Active = false;

		}
	}

	//親クラス更新
	Actor3D::Update();
}

//=============================================================================
//　弾生成関数
//=============================================================================
void Bullet::SpawnBullet(Vector3 _position, Vector3 _velocity,Vector3 _rotation)
{
	//座標設定
	m_Position = _position;

	//回転設定
	m_Rotation = _rotation;

	//速度設定
	m_Velocity = _velocity;

	//有効フラグオン
	m_Active = true;

	//生存時間初期化
	m_LifeTime = 0;

}
